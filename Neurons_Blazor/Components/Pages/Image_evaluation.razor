@page "/image_evaluation"
@using Microsoft.AspNetCore.Components.Forms

<div class="upload-box">
    <h3>Upload an Advertisement Image</h3>
    <InputFile OnChange="HandleImageSelected" accept="image/*" />
</div>

<div class="upload-box">
    <h3>Upload a brand compliance information</h3>
    <InputFile OnChange="HandleBrandCompliance" accept="application/pdf" />
</div>

@if (imagePreview != null)
{
    <div class="mt-3">
        <img src="@imagePreview" style="max-width: 300px;" />
    </div>
}

@if (brandResponse != null)
{
    <div class="mt-3">
        <h4>@brandResponse.Message</h4>
        <ul>
            @foreach (var req in brandResponse.Requirements)
            {
                <li>@req</li>
            }
        </ul>
    </div>
}

@code {
    // Class - maybe make a class module. Probably a good idea
    public class BrandComplianceResponse
    {
        public List<string> Requirements { get; set; } = new();
        public string Message { get; set; } = "";
    }

private BrandComplianceResponse? brandResponse;

    private IBrowserFile? selectedFile;
    private string? imagePreview;

    private async Task HandleImageSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            // Optional: resize to avoid large preview memory usage
            var resizedImage = await selectedFile.RequestImageFileAsync("image/png", 600, 500);

            using var stream = resizedImage.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            imagePreview = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
    }
    [Inject]
    private HttpClient Http { get; set; } = default!; // Injected via DI

    private async Task HandleBrandCompliance(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB
            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(stream);

            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/pdf");

            // Add file to form-data
            content.Add(content: fileContent, name: "file", fileName: selectedFile.Name);

            // Send POST request to your Python API
            var response = await Http.PostAsync("http://127.0.0.1:8000/extract_brand_compliance", content);

            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                brandResponse = JsonSerializer.Deserialize<BrandComplianceResponse>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                Console.WriteLine("Upload failed: " + response.StatusCode);
            }
        }
    }
}
